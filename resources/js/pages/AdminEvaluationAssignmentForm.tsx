import React, { useMemo, useState } from 'react';
import MainLayout from '@/Layouts/MainLayout';
import { useForm, usePage } from '@inertiajs/react';
import Select from 'react-select';
import { toast } from 'sonner';
import { Button } from '@/Components/ui/button';
import { Card } from '@/Components/ui/card';
import Breadcrumb from '@/Components/ui/breadcrumb';
import { User } from '@/types';

interface OptionType {
    value: number;
    label: string;
    grade: number;
}

const allAngleOptions = [
    { value: 'top', label: '‡∏≠‡∏á‡∏®‡∏≤‡∏ö‡∏ô (‡πÄ‡∏à‡πâ‡∏≤‡∏ô‡∏≤‡∏¢)' },
    { value: 'bottom', label: '‡∏≠‡∏á‡∏®‡∏≤‡∏•‡πà‡∏≤‡∏á (‡∏•‡∏π‡∏Å‡∏ô‡πâ‡∏≠‡∏á)' },
    { value: 'left', label: '‡∏≠‡∏á‡∏®‡∏≤‡∏ã‡πâ‡∏≤‡∏¢ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)' },
    { value: 'right', label: '‡∏≠‡∏á‡∏®‡∏≤‡∏Ç‡∏ß‡∏≤ (‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á)' },
];

export default function AdminEvaluationAssignmentForm() {
    const { users } = usePage<{ users: User[] }>().props;

    const userOptions: OptionType[] = useMemo(
        () =>
            users.map((u) => ({
                value: u.id,
                label: `${u.fname} ${u.lname} (${u.position || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á'})`,
                grade: parseInt(u.grade),
            })),
        [users]
    );

    const [selectedEvaluator, setSelectedEvaluator] = useState<OptionType | null>(null);
    const [availableAngles, setAvailableAngles] = useState<{ value: string; label: string }[]>([]);
    const [selectedAngle, setSelectedAngle] = useState<{ value: string; label: string } | null>(null);

    const { data, setData, post, processing, reset, errors } = useForm({
        evaluator_id: '',
        angle: '',
        evaluatee_ids: [] as number[],
    });

    const handleEvaluatorChange = (selected: OptionType | null) => {
        setSelectedEvaluator(selected);
        setData('evaluator_id', selected?.value || '');
        setSelectedAngle(null);
        setData('angle', '');

        if (!selected) {
            setAvailableAngles([]);
            return;
        }

        if (selected.grade >= 9) {
            setAvailableAngles(allAngleOptions); // ‡∏£‡∏∞‡∏î‡∏±‡∏ö 9‚Äì12 ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏≠‡∏á‡∏®‡∏≤
        } else {
            setAvailableAngles(allAngleOptions.filter((opt) => opt.value === 'top' || opt.value === 'left')); // ‡∏£‡∏∞‡∏î‡∏±‡∏ö 5‚Äì8 ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà ‡∏ö‡∏ô/‡∏ã‡πâ‡∏≤‡∏¢
        }
    };

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();

        if (!selectedEvaluator || !selectedAngle || data.evaluatee_ids.length === 0) {
            toast.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
            return;
        }

        post(route('assignments.store-multi'), {
            onSuccess: () => {
                toast.success('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß');
                reset();
                setSelectedEvaluator(null);
                setSelectedAngle(null);
                setAvailableAngles([]);
            },
            onError: () => toast.error('üö´ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÑ‡∏î‡πâ'),
        });
    };

    const filteredEvaluateeOptions = useMemo(() => {
        if (!selectedEvaluator || !selectedAngle) return [];

        const evaluatorGrade = selectedEvaluator.grade;

        if (selectedAngle.value === 'top') {
            return userOptions.filter((u) => u.grade > evaluatorGrade); // ‡πÄ‡∏à‡πâ‡∏≤‡∏ô‡∏≤‡∏¢
        }
        if (selectedAngle.value === 'bottom') {
            return userOptions.filter((u) => u.grade < evaluatorGrade); // ‡∏•‡∏π‡∏Å‡∏ô‡πâ‡∏≠‡∏á
        }
        return userOptions.filter((u) => Math.abs(u.grade - evaluatorGrade) <= 1); // ‡∏ã‡πâ‡∏≤‡∏¢/‡∏Ç‡∏ß‡∏≤
    }, [selectedEvaluator, selectedAngle, userOptions]);

    const previewEvaluatees = useMemo(
        () => userOptions.filter((u) => data.evaluatee_ids.includes(u.value)),
        [data.evaluatee_ids, userOptions]
    );

    return (
        <MainLayout
            title="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"
            breadcrumb={
                <Breadcrumb
                    items={[
                        { label: '‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö', href: route('admindashboard') },
                        { label: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô-‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô', href: route('assignments.index') },
                        { label: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô - ‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô', active: true },
                    ]}
                />
            }
        >
            <div className="max-w-5xl mx-auto px-6 py-10">
                <Card className="p-8 shadow-xl bg-white dark:bg-zinc-900">
                    <h1 className="text-2xl font-bold text-gray-800 dark:text-white mb-8">
                        ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô - ‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
                    </h1>

                    <form onSubmit={handleSubmit} className="space-y-8">
                        {/* Evaluator */}
                        <div>
                            <label className="block mb-2 text-sm font-semibold dark:text-gray-300">
                                üë®‚Äçüè´ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
                            </label>
                            <Select
                                options={userOptions}
                                value={selectedEvaluator}
                                onChange={handleEvaluatorChange}
                                placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"
                                isClearable
                                classNamePrefix="react-select"
                                styles={{
                                    menu: (base) => ({ ...base, color: 'black' }),
                                    option: (base, { isFocused }) => ({
                                        ...base,
                                        color: 'black',
                                        backgroundColor: isFocused ? '#e0e0e0' : 'white',
                                    }),
                                    singleValue: (base) => ({ ...base, color: 'black' }),
                                    input: (base) => ({ ...base, color: 'black' }),
                                }}
                            />
                        </div>

                        {/* Angle */}
                        {availableAngles.length > 0 && (
                            <div>
                                <label className="block mb-2 text-sm font-semibold dark:text-gray-300">
                                    üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏á‡∏®‡∏≤
                                </label>
                                <Select
                                    options={availableAngles}
                                    value={selectedAngle}
                                    onChange={(selected) => {
                                        setSelectedAngle(selected);
                                        setData('angle', selected?.value || '');
                                    }}
                                    placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏á‡∏®‡∏≤"
                                    isClearable
                                    classNamePrefix="react-select"
                                    styles={{
                                        menu: (base) => ({ ...base, color: 'black' }),
                                        option: (base, { isFocused }) => ({
                                            ...base,
                                            color: 'black',
                                            backgroundColor: isFocused ? '#e0e0e0' : 'white',
                                        }),
                                        singleValue: (base) => ({ ...base, color: 'black' }),
                                        input: (base) => ({ ...base, color: 'black' }),
                                    }}
                                />
                            </div>
                        )}

                        {/* Evaluatees */}
                        {selectedAngle && (
                            <div>
                                <label className="block mb-2 text-sm font-semibold dark:text-gray-300">
                                    üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô (‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô)
                                </label>
                                <Select
                                    options={filteredEvaluateeOptions}
                                    value={filteredEvaluateeOptions.filter((opt) =>
                                        data.evaluatee_ids.includes(opt.value)
                                    )}
                                    onChange={(selected) =>
                                        setData(
                                            'evaluatee_ids',
                                            selected ? selected.map((s) => s.value) : []
                                        )
                                    }
                                    placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"
                                    isMulti
                                    isClearable
                                    classNamePrefix="react-select"
                                    styles={{
                                        menu: (base) => ({ ...base, color: 'black' }),
                                        option: (base, { isFocused }) => ({
                                            ...base,
                                            color: 'black',
                                            backgroundColor: isFocused ? '#e0e0e0' : 'white',
                                        }),
                                        singleValue: (base) => ({ ...base, color: 'black' }),
                                        input: (base) => ({ ...base, color: 'black' }),
                                    }}
                                />
                            </div>
                        )}

                        {/* Preview Table */}
                        {previewEvaluatees.length > 0 && (
                            <div className="mt-6">
                                <h2 className="text-lg font-semibold text-gray-800 dark:text-white mb-4">
                                    üëÄ ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                                </h2>
                                <div className="overflow-x-auto">
                                    <table className="min-w-full bg-white dark:bg-zinc-800 rounded-lg overflow-hidden text-sm">
                                        <thead>
                                            <tr className="bg-gray-100 dark:bg-zinc-700">
                                                <th className="p-3 text-left">‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô</th>
                                                <th className="p-3 text-left">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {previewEvaluatees.map((u) => (
                                                <tr key={u.value} className="border-b dark:border-zinc-700">
                                                    <td className="p-3">{u.label}</td>
                                                    <td className="p-3">{selectedAngle?.label}</td>
                                                </tr>
                                            ))}
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        )}

                        {/* Submit */}
                        <div className="flex justify-end pt-6">
                            <Button type="submit" disabled={processing} className="px-6">
                                ‚ûï ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå
                            </Button>
                        </div>
                    </form>
                </Card>
            </div>
        </MainLayout>
    );
}
