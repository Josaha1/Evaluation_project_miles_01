import React, { useMemo, useState } from "react";
import MainLayout from "@/Layouts/MainLayout";
import { useForm, usePage } from "@inertiajs/react";
import Select from "react-select";
import { toast } from "sonner";
import { Button } from "@/Components/ui/button";
import { Card } from "@/Components/ui/card";
import Breadcrumb from "@/Components/ui/breadcrumb";
import { router } from "@inertiajs/react";
import {
    Info,
    Users,
    AlertCircle,
    CheckCircle,
    Plus,
    Trash2,
    UserCheck,
} from "lucide-react";

// Define User interface locally
interface User {
    id: number;
    emid: string;
    prename: string;
    fname: string;
    lname: string;
    grade: string | number;
    sex: string;
    division_id?: number | null;
    department_id?: number | null;
    position_id?: number | null;
    user_type?: string;
    position?: {
        title: string;
    };
    department?: {
        name: string;
    };
    division?: {
        name: string;
    };
    position_title?: string; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö compatibility
}

interface OptionType {
    value: number;
    label: string;
    grade: number;
    division_id?: number | null;
    department_id?: number | null;
    position_id?: number | null;
    position_title?: string;
    user_type?: string;
    division_name?: string; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
    department_name?: string; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô
}

const allAngleOptions = [
    {
        value: "top",
        label: "‡∏≠‡∏á‡∏®‡∏≤‡∏ö‡∏ô (‡πÄ‡∏à‡πâ‡∏≤‡∏ô‡∏≤‡∏¢)",
        description: "‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á",
        icon: "‚¨ÜÔ∏è",
    },
    {
        value: "bottom",
        label: "‡∏≠‡∏á‡∏®‡∏≤‡∏•‡πà‡∏≤‡∏á (‡∏•‡∏π‡∏Å‡∏ô‡πâ‡∏≠‡∏á)",
        description: "‡∏ú‡∏π‡πâ‡πÉ‡∏ï‡πâ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á",
        icon: "‚¨áÔ∏è",
    },
    {
        value: "left",
        label: "‡∏≠‡∏á‡∏®‡∏≤‡∏ã‡πâ‡∏≤‡∏¢ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)",
        description: "‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô",
        icon: "‚¨ÖÔ∏è",
    },
    {
        value: "right",
        label: "‡∏≠‡∏á‡∏®‡∏≤‡∏Ç‡∏ß‡∏≤ (‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á)",
        description: "‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å",
        icon: "‚û°Ô∏è",
    },
];

export default function AdminEvaluationAssignmentForm() {
    const { users } = usePage<{ users: User[] }>().props;

    const userOptions: OptionType[] = useMemo(
        () =>
            users.map((u) => ({
                value: u.id,
                label: `${u.prename}${u.fname} ${u.lname} (${
                    u.position?.title ?? u.position_title ?? "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á"
                } / ${u.department?.name ?? "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô"} / ${
                    u.division?.name ?? "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô"
                })`,
                grade: parseInt(u.grade.toString()),
                division_id: u.division_id,
                department_id: u.department_id,
                position_id: u.position_id,
                position_title:
                    u.position?.title ?? u.position_title ?? "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á",
                user_type: u.user_type || "",
                division_name: u.division?.name ?? "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô",
                department_name: u.department?.name ?? "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô",
            })),
        [users]
    );

    const [selectedEvaluatee, setSelectedEvaluatee] =
        useState<OptionType | null>(null);
    const [availableAngles, setAvailableAngles] = useState<
        {
            value: string;
            label: string;
            description: string;
            icon: string;
        }[]
    >([]);
    const [selectedAngle, setSelectedAngle] = useState<{
        value: string;
        label: string;
        description: string;
        icon: string;
    } | null>(null);
    const [selectedEvaluators, setSelectedEvaluators] = useState<OptionType[]>(
        []
    );
    const [isSubmitting, setIsSubmitting] = useState(false);

    const { data, setData, post, processing, reset, errors } = useForm({
        assignments: [] as Array<{
            evaluator_id: number;
            evaluatee_id: number;
            angle: string;
        }>,
    });

    const handleEvaluateeChange = (selected: OptionType | null) => {
        setSelectedEvaluatee(selected);
        setSelectedAngle(null);
        setSelectedEvaluators([]);

        if (!selected) {
            setAvailableAngles([]);
            return;
        }

        const grade = selected.grade;
        if (grade >= 9) {
            setAvailableAngles(allAngleOptions);
        } else {
            setAvailableAngles(
                allAngleOptions.filter(
                    (opt) => opt.value === "top" || opt.value === "left"
                )
            );
        }
    };

    const handleAngleChange = (selected: any) => {
        setSelectedAngle(selected);
        setSelectedEvaluators([]);
    };

    const addEvaluator = (evaluator: OptionType) => {
        if (!selectedEvaluators.find((e) => e.value === evaluator.value)) {
            setSelectedEvaluators([...selectedEvaluators, evaluator]);
        }
    };

    const removeEvaluator = (evaluatorId: number) => {
        setSelectedEvaluators(
            selectedEvaluators.filter((e) => e.value !== evaluatorId)
        );
    };

    const handleSubmitAll = async (e: React.FormEvent) => {
        e.preventDefault();

        if (
            !selectedEvaluatee ||
            !selectedAngle ||
            selectedEvaluators.length === 0
        ) {
            toast.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
            return;
        }

        setIsSubmitting(true);

        const assignments = selectedEvaluators.map((evaluator) => ({
            evaluator_id: evaluator.value,
            evaluatee_id: selectedEvaluatee.value,
            angle: selectedAngle.value,
        }));

        try {
            // ‡∏™‡πà‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ server validate ‡πÑ‡∏î‡πâ‡∏î‡∏µ
            for (const assignment of assignments) {
                await new Promise((resolve, reject) => {
                    router.post(route("assignments.store"), assignment, {
                        onSuccess: () => resolve(true),
                        onError: (errors) => reject(errors),
                    });
                });
            }

            toast.success(
                `‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${assignments.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`
            );

            // Reset form
            setSelectedEvaluatee(null);
            setSelectedAngle(null);
            setAvailableAngles([]);
            setSelectedEvaluators([]);
        } catch (error) {
            toast.error("üö´ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà");
        } finally {
            setIsSubmitting(false);
        }
    };

    const filteredEvaluatorOptions = useMemo(() => {
        if (!selectedEvaluatee || !selectedAngle) return [];

        const grade = selectedEvaluatee.grade;
        const divisionId = selectedEvaluatee.division_id;
        const departmentId = selectedEvaluatee.department_id;

        let filtered: OptionType[] = [];

        if (selectedAngle.value === "top") {
            // ‡∏≠‡∏á‡∏®‡∏≤‡∏ö‡∏ô: ‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏≤
            if (grade < 9) {
                // C5-C8 ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ (C9-C12)
                filtered = userOptions.filter(
                    (u) =>
                        u.grade >= 9 &&
                        u.position_title &&
                        (u.position_title.includes("‡∏ú‡∏π‡πâ‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£") ||
                            u.position_title.includes("‡∏ú‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£") ||
                            u.position_title.includes("‡∏£‡∏≠‡∏á") ||
                            u.position_title.includes("‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢")) &&
                        u.user_type === "internal"
                );
            } else {
                // C9+ ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤
                filtered = userOptions.filter(
                    (u) => u.grade > grade && u.user_type === "internal"
                );

                // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ division ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ prioritize
                if (divisionId) {
                    const sameDivision = filtered.filter(
                        (u) => u.division_id === divisionId
                    );
                    if (sameDivision.length > 0) {
                        filtered = sameDivision;
                    }
                }
            }
        } else if (selectedAngle.value === "left") {
            // ‡∏≠‡∏á‡∏®‡∏≤‡∏ã‡πâ‡∏≤‡∏¢: ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏á‡∏≤‡∏ô
            if (grade < 9) {
                // C5-C8 ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                filtered = userOptions.filter(
                    (u) =>
                        u.grade >= 5 &&
                        u.grade <= 8 &&
                        u.user_type === "internal" &&
                        u.value !== selectedEvaluatee.value // ‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
                );
            } else {
                // C9+ ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                filtered = userOptions.filter(
                    (u) =>
                        u.grade === grade &&
                        u.user_type === "internal" &&
                        u.value !== selectedEvaluatee.value
                );
            }

            // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ division ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ prioritize
            if (divisionId) {
                const sameDivision = filtered.filter(
                    (u) => u.division_id === divisionId
                );
                if (sameDivision.length > 0) {
                    filtered = sameDivision;
                }
            }
        } else if (selectedAngle.value === "bottom") {
            // ‡∏≠‡∏á‡∏®‡∏≤‡∏•‡πà‡∏≤‡∏á: ‡∏ú‡∏π‡πâ‡πÉ‡∏ï‡πâ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏≤ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ C9+)
            if (grade >= 9) {
                filtered = userOptions.filter(
                    (u) => u.grade < grade && u.user_type === "internal"
                );

                // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô/‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                if (divisionId) {
                    const sameDivision = filtered.filter(
                        (u) => u.division_id === divisionId
                    );
                    if (sameDivision.length > 0) {
                        filtered = sameDivision;
                    }
                } else if (departmentId) {
                    const sameDepartment = filtered.filter(
                        (u) => u.department_id === departmentId
                    );
                    if (sameDepartment.length > 0) {
                        filtered = sameDepartment;
                    }
                }
            }
        } else if (selectedAngle.value === "right") {
            // ‡∏≠‡∏á‡∏®‡∏≤‡∏Ç‡∏ß‡∏≤: ‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
            filtered = userOptions.filter((u) => u.user_type === "external");
        }

        // ‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß
        return filtered.filter(
            (option) =>
                !selectedEvaluators.find(
                    (selected) => selected.value === option.value
                )
        );
    }, [selectedEvaluatee, selectedAngle, userOptions, selectedEvaluators]);

    return (
        <MainLayout
            title="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"
            breadcrumb={
                <Breadcrumb
                    items={[
                        {
                            label: "‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö",
                            href: route("admindashboard"),
                        },
                        {
                            label: "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô-‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
                            href: route("assignments.index"),
                        },
                        {
                            label: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô - ‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
                            active: true,
                        },
                    ]}
                />
            }
        >
            <div className="max-w-6xl mx-auto px-6 py-10">
                <Card className="p-8 shadow-xl bg-white dark:bg-zinc-900">
                    <div className="mb-8">
                        <h1 className="text-2xl font-bold text-gray-800 dark:text-white mb-2">
                            ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô - ‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
                        </h1>
                        <p className="text-gray-600 dark:text-gray-400">
                            ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠‡∏≠‡∏á‡∏®‡∏≤
                            ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
                        </p>
                    </div>

                    <form onSubmit={handleSubmitAll} className="space-y-8">
                        {/* Evaluatee Selection */}
                        <div className="bg-blue-50 dark:bg-blue-900/20 p-6 rounded-lg border border-blue-200 dark:border-blue-800">
                            <label className="block mb-3 text-sm font-semibold dark:text-gray-300 flex items-center">
                                <UserCheck className="w-4 h-4 mr-2" />
                                üë§ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
                            </label>
                            <Select
                                options={userOptions}
                                value={selectedEvaluatee}
                                onChange={handleEvaluateeChange}
                                placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô..."
                                isClearable
                                className="react-select-container"
                                classNamePrefix="react-select"
                            />
                            {selectedEvaluatee && (
                                <div className="mt-3 p-3 bg-white dark:bg-zinc-800 rounded border">
                                    <div className="text-sm text-gray-600 dark:text-gray-400">
                                        üìä ‡πÄ‡∏Å‡∏£‡∏î:{" "}
                                        <span className="font-medium">
                                            C{selectedEvaluatee.grade}
                                        </span>
                                        {selectedEvaluatee.grade >= 9 ? (
                                            <span className="ml-2 text-green-600">
                                                ‚úÖ ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô 4 ‡∏≠‡∏á‡∏®‡∏≤ (‡∏ö‡∏ô, ‡∏•‡πà‡∏≤‡∏á,
                                                ‡∏ã‡πâ‡∏≤‡∏¢, ‡∏Ç‡∏ß‡∏≤)
                                            </span>
                                        ) : (
                                            <span className="ml-2 text-yellow-600">
                                                ‚ö†Ô∏è ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô 2 ‡∏≠‡∏á‡∏®‡∏≤ (‡∏ö‡∏ô, ‡∏ã‡πâ‡∏≤‡∏¢)
                                            </span>
                                        )}
                                    </div>
                                </div>
                            )}
                        </div>

                        {/* Angle Selection */}
                        {availableAngles.length > 0 && (
                            <div className="bg-green-50 dark:bg-green-900/20 p-6 rounded-lg border border-green-200 dark:border-green-800">
                                <label className="block mb-3 text-sm font-semibold dark:text-gray-300 flex items-center">
                                    <Info className="w-4 h-4 mr-2" />
                                    üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏á‡∏®‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
                                </label>
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    {availableAngles.map((angle) => (
                                        <div
                                            key={angle.value}
                                            onClick={() =>
                                                handleAngleChange(angle)
                                            }
                                            className={`p-4 border-2 rounded-lg cursor-pointer transition-all ${
                                                selectedAngle?.value ===
                                                angle.value
                                                    ? "border-green-500 bg-green-100 dark:bg-green-900/30"
                                                    : "border-gray-200 hover:border-gray-300 dark:border-gray-700"
                                            }`}
                                        >
                                            <div className="flex items-center justify-between mb-2">
                                                <span className="font-medium flex items-center">
                                                    <span className="text-xl mr-2">
                                                        {angle.icon}
                                                    </span>
                                                    {angle.label}
                                                </span>
                                                {selectedAngle?.value ===
                                                    angle.value && (
                                                    <CheckCircle className="w-5 h-5 text-green-500" />
                                                )}
                                            </div>
                                            <p className="text-sm text-gray-600 dark:text-gray-400">
                                                {angle.description}
                                            </p>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        )}

                        {/* Evaluator Selection */}
                        {selectedAngle && (
                            <div className="bg-purple-50 dark:bg-purple-900/20 p-6 rounded-lg border border-purple-200 dark:border-purple-800">
                                <label className="block mb-3 text-sm font-semibold dark:text-gray-300 flex items-center">
                                    <Users className="w-4 h-4 mr-2" />
                                    üßë‚Äçüíº ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô ({
                                        selectedAngle.icon
                                    }{" "}
                                    {selectedAngle.label})
                                </label>

                                <Select
                                    options={filteredEvaluatorOptions}
                                    onChange={(selected) =>
                                        selected && addEvaluator(selected)
                                    }
                                    placeholder={`‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö${selectedAngle.label}...`}
                                    isClearable
                                    value={null}
                                    className="react-select-container mb-4"
                                    classNamePrefix="react-select"
                                />

                                {/* Selected Evaluators List */}
                                {selectedEvaluators.length > 0 && (
                                    <div className="mt-4">
                                        <h4 className="text-sm font-medium mb-3 flex items-center">
                                            <CheckCircle className="w-4 h-4 mr-2 text-green-500" />
                                            ‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (
                                            {selectedEvaluators.length} ‡∏Ñ‡∏ô)
                                        </h4>
                                        <div className="space-y-2">
                                            {selectedEvaluators.map(
                                                (evaluator, index) => (
                                                    <div
                                                        key={evaluator.value}
                                                        className="flex items-center justify-between p-3 bg-white dark:bg-zinc-800 rounded border"
                                                    >
                                                        <div className="flex items-center space-x-3">
                                                            <div className="w-8 h-8 bg-indigo-100 dark:bg-indigo-900 rounded-full flex items-center justify-center">
                                                                <span className="text-sm font-medium text-indigo-600 dark:text-indigo-400">
                                                                    {index + 1}
                                                                </span>
                                                            </div>
                                                            <div>
                                                                <div className="font-medium text-gray-900 dark:text-white text-sm">
                                                                    {
                                                                        evaluator.label.split(
                                                                            " ("
                                                                        )[0]
                                                                    }
                                                                </div>
                                                                <div className="text-xs text-gray-500 dark:text-gray-400">
                                                                    ‡πÄ‡∏Å‡∏£‡∏î: C
                                                                    {
                                                                        evaluator.grade
                                                                    }{" "}
                                                                    ‚Ä¢{" "}
                                                                    {evaluator.user_type ===
                                                                    "external"
                                                                        ? "‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å"
                                                                        : "‡∏†‡∏≤‡∏¢‡πÉ‡∏ô"}
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <button
                                                            type="button"
                                                            onClick={() =>
                                                                removeEvaluator(
                                                                    evaluator.value
                                                                )
                                                            }
                                                            className="text-red-500 hover:text-red-700 transition-colors p-1 rounded hover:bg-red-50"
                                                            title="‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
                                                        >
                                                            <Trash2 className="w-4 h-4" />
                                                        </button>
                                                    </div>
                                                )
                                            )}
                                        </div>
                                    </div>
                                )}

                                {/* Available Evaluators Count */}
                                <div className="mt-4 p-3 bg-gray-50 dark:bg-gray-800 rounded">
                                    <div className="text-sm text-gray-600 dark:text-gray-400">
                                        üí° ‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°:{" "}
                                        {filteredEvaluatorOptions.length} ‡∏Ñ‡∏ô
                                        {filteredEvaluatorOptions.length ===
                                            0 &&
                                            selectedEvaluators.length === 0 && (
                                                <span className="text-red-600 dark:text-red-400 ml-2">
                                                    ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                                                </span>
                                            )}
                                    </div>
                                </div>
                            </div>
                        )}

                        {/* Submit Section */}
                        {selectedEvaluatee &&
                            selectedAngle &&
                            selectedEvaluators.length > 0 && (
                                <div className="bg-indigo-50 dark:bg-indigo-900/20 p-6 rounded-lg border border-indigo-200 dark:border-indigo-800">
                                    <h3 className="text-lg font-semibold mb-4 flex items-center">
                                        <CheckCircle className="w-5 h-5 mr-2 text-green-500" />
                                        üìù ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                                    </h3>
                                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                                        <div>
                                            <span className="font-medium text-gray-700 dark:text-gray-300">
                                                ‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô:
                                            </span>
                                            <div className="text-gray-600 dark:text-gray-400 mt-1">
                                                {
                                                    selectedEvaluatee.label.split(
                                                        " ("
                                                    )[0]
                                                }
                                            </div>
                                        </div>
                                        <div>
                                            <span className="font-medium text-gray-700 dark:text-gray-300">
                                                ‡∏≠‡∏á‡∏®‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô:
                                            </span>
                                            <div className="text-gray-600 dark:text-gray-400 mt-1">
                                                {selectedAngle.icon}{" "}
                                                {selectedAngle.label}
                                            </div>
                                        </div>
                                        <div>
                                            <span className="font-medium text-gray-700 dark:text-gray-300">
                                                ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô:
                                            </span>
                                            <div className="text-gray-600 dark:text-gray-400 mt-1">
                                                üë• {selectedEvaluators.length}{" "}
                                                ‡∏Ñ‡∏ô
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            )}

                        {/* Action Buttons */}
                        <div className="flex justify-between pt-6 border-t border-gray-200 dark:border-gray-700">
                            <Button
                                type="button"
                                variant="outline"
                                onClick={() =>
                                    router.visit(route("assignments.index"))
                                }
                                className="px-6"
                            >
                                ‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                            </Button>

                            <Button
                                type="submit"
                                disabled={
                                    isSubmitting ||
                                    selectedEvaluators.length === 0
                                }
                                className="px-8"
                            >
                                {isSubmitting ? (
                                    <>
                                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                                        ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...
                                    </>
                                ) : (
                                    <>
                                        <Plus className="w-4 h-4 mr-2" />
                                        ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå (
                                        {selectedEvaluators.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
                                    </>
                                )}
                            </Button>
                        </div>
                    </form>

                    {/* Help Section */}
                    <div className="mt-8 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg border-l-4 border-blue-500">
                        <h4 className="font-medium text-gray-900 dark:text-white mb-2 flex items-center">
                            <Info className="w-4 h-4 mr-2" />
                            üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                        </h4>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                            <li>
                                ‚Ä¢ ‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏Å‡∏£‡∏î C9-C12 ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏à‡∏≤‡∏Å 4
                                ‡∏≠‡∏á‡∏®‡∏≤ (‡∏ö‡∏ô, ‡∏•‡πà‡∏≤‡∏á, ‡∏ã‡πâ‡∏≤‡∏¢, ‡∏Ç‡∏ß‡∏≤)
                            </li>
                            <li>
                                ‚Ä¢ ‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏Å‡∏£‡∏î C5-C8 ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏à‡∏≤‡∏Å 2 ‡∏≠‡∏á‡∏®‡∏≤
                                (‡∏ö‡∏ô, ‡∏ã‡πâ‡∏≤‡∏¢)
                            </li>
                            <li>
                                ‚Ä¢
                                ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠‡∏≠‡∏á‡∏®‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠
                            </li>
                            <li>
                                ‚Ä¢
                                ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                            </li>
                        </ul>
                    </div>
                </Card>
            </div>
        </MainLayout>
    );
}
